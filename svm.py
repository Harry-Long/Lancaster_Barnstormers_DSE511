#!/usr/bin/env python
# coding: utf-8

# In[1]:


"""
Python script to run SVM model on the original and oversampled dataset 
generated by prepare_data.py script

Author: Inzamam Haque

Date: 11/25/2020
"""
#Importing necessary packages

import prepare_data
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import roc_auc_score

def run_classifier():
#Getting original and oversampled data

	X_origin, y_origin, X_over, y_over = prepare_data.get_data('financial.db')

	#Normalize the dataset
	X_origin = StandardScaler().fit_transform(X_origin)
	X_over = StandardScaler().fit_transform(X_over)

	#Randomly split training and testing data from the original dataset
	X_train, X_test, y_train, y_test = train_test_split(X_origin, y_origin, test_size=0.33,random_state=21)

	#Create a svm Classifier
	clf = svm.SVC(kernel='rbf', gamma='auto', C=3.0) #RBF kernel

	#Train the model using the training sets
	clf.fit(X_train, y_train)

	#Predict the response for test dataset
	y_pred = clf.predict(X_test)

	#Display classification summary report
	print('\nClassification report of SVM classifier for the original dataset\n')
	print(classification_report(y_test, y_pred))

	roc = roc_auc_score(y_test,y_pred)
	print(f'ROC-AUC score of the SVM classifier for the original dataset: {roc}')

	print('\nConfusion matrix of the SVM classifier for the original dataset:\n')
	print(confusion_matrix(y_test,y_pred))


	#Randomly split training and testing data from the oversampled dataset
	X_train1, X_test1, y_train1, y_test1 = train_test_split(X_over, y_over, test_size=0.33,random_state=21)

	#Train the model using the training sets
	clf.fit(X_train1, y_train1)

	#Predict the response for test dataset
	y_pred1 = clf.predict(X_test1)

	#Display classification summary report for the oversampled dataset
	print('\nClassification report of SVM classifier for the oversampled dataset\n')
	print(classification_report(y_test1, y_pred1))

	roc2 = roc_auc_score(y_test1,y_pred1)
	print(f'ROC-AUC score of the SVM classifier for the oversampled dataset: {roc2}')

	print('\nConfusion matrix of the SVM classifier for the oversampled dataset:\n')
	print(confusion_matrix(y_test1,y_pred1))

	return None

if __name__ == "__main__":
	_ = run_classifier()




